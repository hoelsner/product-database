#
# instance for selenium test cases
#
version: '3'

services:
  build_deps:
    container_name: ${COMPOSE_PROJECT_NAME:-productdbtesting}_build_deps
    image: "${DOCKER_REGISTRY:-localhost.localdomain}/productdb/build_deps:testing"
    build:
      context: .
      dockerfile: deploy/docker/Dockerfile-build_deps
    environment: &app
      LOAD_SELENIUM_TEST_DATA: 1
      DJANGO_SECRET_KEY: justfortests
      POSTGRES_DB: productdb
      POSTGRES_USER: productdb
      POSTGRES_PASSWORD: justfortests
      DJANGO_LOG_LEVEL: debug
      PDB_REDIS_PASSWORD: yetanothertest
    volumes:
      - static_files:/var/www/productdb/static
      - ssl_files:/var/www/productdb/ssl
      - data:/var/www/productdb/data
    networks:
      - default
      - internal

  redis:
    container_name: ${COMPOSE_PROJECT_NAME:-productdbtesting}_redis
    restart: always
    image: redis:6
    command: /bin/sh -c "redis-server --requirepass $$PDB_REDIS_PASSWORD"
    environment: *app
    volumes:
      - redis_data:/data
    networks:
      - internal

  database:
    container_name: ${COMPOSE_PROJECT_NAME:-productdbtesting}_database
    command: -c ssl=on -c ssl_cert_file=/var/www/productdb/ssl/database.crt -c ssl_key_file=/var/www/productdb/ssl/database.key
    restart: always
    image: postgres:12.3
    environment: *app
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backup:/backups
      - ssl_files:/var/www/productdb/ssl:ro
    networks:
      - internal

  beat:
    container_name: ${COMPOSE_PROJECT_NAME:-productdbtesting}_beat
    restart: always
    image: "${DOCKER_REGISTRY:-localhost.localdomain}/productdb/django:testing"
    build:
      context: .
      dockerfile: deploy/docker/Dockerfile-django
    command: start_celery_beat
    environment: *app
    networks:
      - default
      - internal
    volumes:
      - data:/var/www/productdb/data
    depends_on:
      - build_deps
      - database
      - redis

  worker:
    restart: always
    image: "${DOCKER_REGISTRY:-localhost.localdomain}/productdb/django:testing"
    build:
      context: .
      dockerfile: deploy/docker/Dockerfile-django
    command: start_celery_worker
    environment: *app
    networks:
      - default
      - internal
    volumes:
      - data:/var/www/productdb/data
      - ssl_files:/var/www/productdb/ssl:ro
    depends_on:
      - build_deps
      - database
      - redis
      - beat

  web:
    restart: always
    image: "${DOCKER_REGISTRY:-localhost.localdomain}/productdb/django:testing"
    build:
      context: .
      dockerfile: deploy/docker/Dockerfile-django
    command: start_gunicorn
    environment: *app
    networks:
      - default
      - internal
    volumes:
      - data:/var/www/productdb/data
      - ssl_files:/var/www/productdb/ssl:ro
    depends_on:
      - build_deps
      - database
      - redis
    labels:
      productdb: web

  nginx:
    container_name: ${COMPOSE_PROJECT_NAME:-productdbtesting}_nginx
    restart: always
    image: "${DOCKER_REGISTRY:-localhost.localdomain}/productdb/nginx:testing"
    build:
      context: .
      dockerfile: deploy/docker/Dockerfile-nginx
    environment: *app
    ports:
      - "${EXPOSE_IP:-127.0.0.1}:${NGINX_HTTP_PORT:-27080}:80"
      - "${EXPOSE_IP:-127.0.0.1}:${NGINX_HTTPS_PORT:-27443}:443"
    networks:
      default:
      source_internal:
        aliases:
          - productdbtestinstance
    volumes:
      - static_files:/var/www/productdb/static:ro
      - ssl_files:/var/www/productdb/ssl:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - build_deps
      - web

networks:
  default:
  internal:
    driver: bridge
  source_internal:
    external: true

volumes:
  postgres_data:
  static_files:
  ssl_files:
  data:
  postgres_backup:
  redis_data:
